Title: Implement Cohen Sutherland polygon clipping method to clip the 
polygon with respect the viewport and window. Use mouse click, keyboard 
interface 
/** Sutherland Hodgeman Polygon Clipping 
* Usage  - click on the canvas to seed the points of the polygon 
*          
*          
*          
press d - to draw the seeded polygon 
drag the mouse cursor to draw the required clip rectangle 
press c - to clip the required polygon section 
* NOTE   - Clip rectangle must be drawn from top left to bottom right 
*    
Contains Debug Code to reconstruct the clipping in 
comments in SHPC function 
*/

#include <iostream>
#include <cmath>
#include <ctime>
#include <GL/glut.h>
#include <list>
using namespace std;

void init() {
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0, 640, 0, 480);
}

int xmin = 50, ymin = 50, xmax = 200, ymax = 200;
int enter = 1, sz, st_flag = 1;

float** pts;

class points {
    int x, y;

public:
    points(int x, int y) : x(x), y(y) {}

    int getx() const { return x; }
    int gety() const { return y; }
};

points *s, *p;
list<points*> in;
list<points*> outer;

void delay(float ms) {
    clock_t goal = ms + clock();
    while (goal > clock());
}

void drawPolygon() {
    glBegin(GL_LINE_LOOP);
    pts = new float*[in.size()];
    for (size_t i = 0; i < in.size(); ++i) {
        pts[i] = new float[2];
    }
    sz = in.size();
    while (!in.empty()) {
        points* temp = in.front();
        pts[sz - in.size()][0] = temp->getx();
        pts[sz - in.size()][1] = temp->gety();
        glVertex2i(temp->getx(), temp->gety());
        in.pop_front();
    }
    glEnd();
    glFlush();
}

void redraw() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0, 0, 0);
    glBegin(GL_LINE_LOOP);
    for (int i = 0; i < sz; i++) {
        glVertex2i(pts[i][0], pts[i][1]);
    }
    glEnd();
    glFlush();

    glBegin(GL_LINE_LOOP);
    glVertex2i(xmin, ymin);
    glVertex2i(xmin, ymax);
    glVertex2i(xmax, ymax);
    glVertex2i(xmax, ymin);
    glEnd();
    glFlush();
}

int inside(int x, int y, int clip_edge) {
    switch (clip_edge) {
        case 1: return x < xmax;
        case 2: return y > ymax;
        case 3: return x > xmin;
        case 4: return y < ymin;
        default: return 0;
    }
}

points* intersect(points* S, points* P, int clip_edge) {
    float m = (P->getx() - S->getx()) == 0 ? 0 : 
              (float)(P->gety() - S->gety()) / (P->getx() - S->getx());
    float c = (float)S->gety() - m * S->getx();

    if (clip_edge == 1) return new points(xmax, (int)(m * xmax + c));
    if (clip_edge == 2) return new points((ymax - c) / m, ymax);
    if (clip_edge == 3) return new points(xmin, (int)(m * xmin + c));
    if (clip_edge == 4) return new points((ymin - c) / m, ymin);

    return nullptr;
}

float** out_to_in(float** inner, list<points*> out) {
    inner = new float*[out.size()];
    for (size_t i = 0; i < out.size(); ++i) {
        inner[i] = new float[2];
    }
    sz = out.size();
    while (!out.empty()) {
        points* temp = out.front();
        inner[sz - out.size()][0] = temp->getx();
        inner[sz - out.size()][1] = temp->gety();
        out.pop_front();
    }
    return inner;
}

float** SHPC(float** inva, list<points*> out, int clip_edge) {
    s = new points(inva[sz - 1][0], inva[sz - 1][1]);
    for (int j = 0; j < sz; ++j) {
        p = new points(inva[j][0], inva[j][1]);

        if (inside(p->getx(), p->gety(), clip_edge)) {
            if (inside(s->getx(), s->gety(), clip_edge)) {
                out.push_back(new points(p->getx(), p->gety()));
            } else {
                out.push_back(intersect(s, p, clip_edge));
                out.push_back(p);
            }
        } else if (inside(s->getx(), s->gety(), clip_edge)) {
            out.push_back(intersect(s, p, clip_edge));
        }
        s = p;
    }
    inva = out_to_in(inva, out);
    return inva;
}

void key(unsigned char key_t, int x, int y) {
    if (key_t == 'd') {
        enter = -1;
        drawPolygon();
        in.clear();
    }
    if (key_t == 'c') {
        pts = SHPC(pts, outer, 1);
        pts = SHPC(pts, outer, 2);
        pts = SHPC(pts, outer, 3);
        pts = SHPC(pts, outer, 4);
        redraw();
    }
}

void mouse(int btn, int state, int x, int y) {
    y = 480 - y;
    if (btn == GLUT_LEFT_BUTTON && state == GLUT_DOWN && enter) {
        in.push_back(new points(x, y));
    }
}

void drag_start(GLint x, GLint y) {
    y = 480 - y;
    if (enter == -1 && st_flag) {
        xmin = x;
        ymin = y;
        st_flag = 0;
    } else {
        xmax = x;
        ymax = y;
    }
    redraw();
}

void drag_end(GLint x, GLint y) {
    y = 480 - y;
    if (enter == -1 && !st_flag) {
        xmax = x;
        ymax = y;
        st_flag = 1;
        redraw();
    }
}

void world() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1, 0, 0);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(640, 480);
    glutInitWindowPosition(200, 200);
    glutCreateWindow("Many Amaze Very GL WOW");
    glutDisplayFunc(world);
    glutMouseFunc(mouse);
    glutMotionFunc(drag_start);
    glutPassiveMotionFunc(drag_end);
    glutKeyboardFunc(key);
    init();
    glutMainLoop();
    return 0;
}
